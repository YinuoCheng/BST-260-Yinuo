covid_data$week_ending_date <- as.Date(covid_data$week_ending_date, format = "%Y/%m/%d")
# Dashed dates
dashed_dates <- as.Date(c("2020-07-01", "2021-02-01", "2021-09-01", "2022-06-01", "2023-03-01", "2024-12-01"))
# Convert week_ending_date to date format
covid_data$week_ending_date <- as.Date(covid_data$week_ending_date, format = "%Y/%m/%d")
# Dashed dates
dashed_dates <- as.Date(c("2020-07-01", "2021-02-01", "2021-09-01", "2022-06-01", "2023-03-01", "2024-12-01"))
average_mortality_by_state <- covid_data %>%
# Add period column
mutate(period = case_when(
week_ending_date < dashed_dates[1] ~ "Before 2020-07-01",
week_ending_date >= dashed_dates[1] & week_ending_date < dashed_dates[2] ~ "2020-07-01 to 2021-02-01",
week_ending_date >= dashed_dates[2] & week_ending_date < dashed_dates[3] ~ "2021-02-01 to 2021-09-01",
week_ending_date >= dashed_dates[3] & week_ending_date < dashed_dates[4] ~ "2021-09-01 to 2022-06-01",
week_ending_date >= dashed_dates[4] & week_ending_date < dashed_dates[5] ~ "2022-06-01 to 2023-03-01",
week_ending_date >= dashed_dates[5] & week_ending_date < dashed_dates[6] ~ "2023-03-01 to 2024-12-01",
TRUE ~ "After 2024-12-01"
)) %>%
# Calculate average mortality rate for each state and period
group_by(state, period) %>%
summarise(average_mortality_rate = mean(crude_COVID_rate_weekly, na.rm = TRUE), .groups = 'drop')
average_mortality_by_state <- covid_data %>%
# Add period column
mutate(period = case_when(
week_ending_date < dashed_dates[1] ~ "Before 2020-07-01",
week_ending_date >= dashed_dates[1] & week_ending_date < dashed_dates[2] ~ "2020-07-01 to 2021-02-01",
week_ending_date >= dashed_dates[2] & week_ending_date < dashed_dates[3] ~ "2021-02-01 to 2021-09-01",
week_ending_date >= dashed_dates[3] & week_ending_date < dashed_dates[4] ~ "2021-09-01 to 2022-06-01",
week_ending_date >= dashed_dates[4] & week_ending_date < dashed_dates[5] ~ "2022-06-01 to 2023-03-01",
week_ending_date >= dashed_dates[5] & week_ending_date < dashed_dates[6] ~ "2023-03-01 to 2024-12-01",
TRUE ~ "After 2024-12-01"
)) %>%
# Calculate average mortality rate for each state and period
group_by(state, period) %>%
summarise(average_mortality_rate = mean(crude_COVID_rate_weekly, na.rm = TRUE), .groups = 'drop')
print(average_mortality_by_state)
library(dplyr)      # For data manipulation
library(readr)      # For reading data
library(ggplot2)    # For plotting
library(patchwork)  # For combining multiple plots
install.packages("patchwork")
library(dplyr)      # For data manipulation
library(readr)      # For reading data
library(ggplot2)    # For plotting
library(patchwork)  # For combining multiple plots
state_list <- unique(average_mortality_by_state$state)  # Get a list of unique states
num_states <- length(state_list)                          # Calculate the number of states
# Plot 10 states per plot
states_per_plot <- 10
num_plots <- ceiling(num_states / states_per_plot)       # Calculate the total number of plots
plots <- list()  # Create a list to store each ggplot object
for (i in 1:num_plots) {
start_index <- (i - 1) * states_per_plot + 1  # Starting index for the current plot
end_index <- min(i * states_per_plot, num_states)  # Ending index for the current plot
states_to_plot <- state_list[start_index:end_index]  # States to be plotted
# Filter the data for the current plot
data_to_plot <- average_mortality_by_state %>% filter(state %in% states_to_plot)
# Loop to draw the line plot
p <- ggplot(data_to_plot, aes(x = period, y = average_mortality_rate, group = state, color = state)) +
geom_line() +  # Add line
geom_point() +  # Add data points
labs(title = paste("Average COVID-19 Mortality Rate by State and Period", sep = ""),
x = "Period", y = "Average Mortality Rate") +  # Add labels
theme_minimal() +  # Use a clean and simple theme
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +  # Set x-axis text angle and hide legend
scale_color_brewer(palette = "Paired")  # Set color palette
plots[[i]] <- p  # Store the ggplot object
}
combined_plot <- wrap_plots(plots, ncol = 3) +  # Set the number of plots per row
plot_layout(nrow = ceiling(num_plots / 3), ncol = 3) +  # Adjust rows and columns based on the number of plots
plot_spacer()  # Reduce space between plots
# Display the combined large plot
print(combined_plot)
library(dplyr)
library(readr)
library(ggplot2)
library(patchwork)
# Read the CSV file
covid_data <- read_csv("\\Desktop\\final project\\covid_data_filtered.csv")
# Read the CSV file
covid_data <- read_csv("covid_data_filtered.csv")
# Convert week_ending_date to date format
covid_data$week_ending_date <- as.Date(covid_data$week_ending_date, format = "%Y/%m/%d")
# Get the list of states
state_list <- unique(covid_data$state)  # Assuming we use the state column from covid_data
num_states <- length(state_list)
# Plotting each 10 states in one chart
states_per_plot <- 10
num_plots <- ceiling(num_states / states_per_plot)
# Group plotting
plots <- list()  # Create a list to store each ggplot object
for (i in 1:num_plots) {
# Calculate the range of states for the current plot
start_index <- (i - 1) * states_per_plot + 1
end_index <- min(i * states_per_plot, num_states)
states_to_plot <- state_list[start_index:end_index]
# Filter data for the current plot
data_to_plot <- covid_data %>% filter(state %in% states_to_plot)
# Draw the line chart
p <- ggplot(data_to_plot, aes(x = period, y = crude_COVID_rate_weekly, group = state, color = state)) +
geom_line() +
geom_point() +
labs(title = paste("Average COVID-19 Mortality Rate by State and Period", sep = ""),
x = "Period",
y = "Average Mortality Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +  # Hide legend
scale_color_brewer(palette = "Paired")
plots[[i]] <- p  # Store each ggplot object in the list
}
# Use patchwork to combine the plots
combined_plot <- wrap_plots(plots, ncol = 3) +  # Adjust ncol parameter as needed for layout
plot_layout(nrow = ceiling(num_plots / 3), ncol = 3) +  # Adjust layout as necessary
plot_spacer()  # Reduce space between plots
# Display the combined plot
print(combined_plot)
# Get the list of states
state_list <- unique(covid_data$state)  # Assuming we use the state column from covid_data
num_states <- length(state_list)
# Plotting each 10 states in one chart
states_per_plot <- 10
num_plots <- ceiling(num_states / states_per_plot)
# Group plotting
plots <- list()  # Create a list to store each ggplot object
for (i in 1:num_plots) {
# Calculate the range of states for the current plot
start_index <- (i - 1) * states_per_plot + 1
end_index <- min(i * states_per_plot, num_states)
states_to_plot <- state_list[start_index:end_index]
# Filter data for the current plot
data_to_plot <- covid_data %>% filter(state %in% states_to_plot)
# Draw the line chart
p <- ggplot(data_to_plot, aes(x = period, y = crude_COVID_rate_weekly, group = state, color = state)) +
geom_line() +
geom_point() +
labs(title = paste("Average COVID-19 Mortality Rate by State and Period", sep = ""),
x = "Period",
y = "Average Mortality Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +  # Hide legend
scale_color_brewer(palette = "Paired")
plots[[i]] <- p  # Store each ggplot object in the list
}
# Use patchwork to combine the plots
combined_plot <- wrap_plots(plots, ncol = 3) +  # Adjust ncol parameter as needed for layout
plot_layout(nrow = ceiling(num_plots / 3), ncol = 3) +  # Adjust layout as necessary
plot_spacer()  # Reduce space between plots
# Display the combined plot
print(combined_plot)
combined_plot
# Read the CSV file
covid_data <- read_csv("covid_data_filtered.csv")
# Convert week_ending_date to date format
covid_data$week_ending_date <- as.Date(covid_data$week_ending_date, format = "%Y/%m/%d")
# Read the CSV file
covid_data <- read_csv("covid_data_filtered.csv")
# Convert week_ending_date to date format
covid_data$week_ending_date <- as.Date(covid_data$week_ending_date, format = "%Y/%m/%d")
library(dplyr)
library(readr)
library(ggplot2)
library(patchwork)
# Read CSV file
covid_data <- read_csv("\\covid_data_filtered.csv")
# Read CSV file
covid_data <- read_csv("covid_data_filtered.csv")
# Convert week_ending_date to date format
covid_data$week_ending_date <- as.Date(covid_data$week_ending_date, format = "%Y/%m/%d")
# Get the list of states
state_list <- unique(covid_data$state)  # Assume using the state column in covid_data
num_states <- length(state_list)
# Plot every 10 states on one chart
states_per_plot <- 10
num_plots <- ceiling(num_states / states_per_plot)
# Group plotting
plots <- list()  # Create a list to store each ggplot object
for (i in 1:num_plots) {
# Calculate the range of states for the current plot
start_index <- (i - 1) * states_per_plot + 1
end_index <- min(i * states_per_plot, num_states)
states_to_plot <- state_list[start_index:end_index]
# Filter the data for the current plot
data_to_plot <- covid_data %>% filter(state %in% states_to_plot)
# Plot the line chart
p <- ggplot(data_to_plot, aes(x = period, y = crude_COVID_rate_weekly, group = state, color = state)) +
geom_line() +
geom_point() +
labs(title = paste("Average COVID-19 Mortality Rate by State and Period", sep = ""),
x = "Period",
y = "Average Mortality Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +  # Hide legend
scale_color_brewer(palette = "Paired")
plots[[i]] <- p  # Store each ggplot object in the list
}
# Combine charts using patchwork
combined_plot <- wrap_plots(plots, ncol = 3) +  # Adjust ncol parameter for layout
plot_layout(nrow = ceiling(num_plots / 3), ncol = 3) +  # Adjust layout as needed
plot_spacer()  # Reduce whitespace between charts
# Display the combined plot
print(combined_plot)
# Get the list of states
state_list <- unique(covid_data$state)  # Assuming we use the state column from covid_data
num_states <- length(state_list)
# Plotting each 10 states in one chart
states_per_plot <- 10
num_plots <- ceiling(num_states / states_per_plot)
# Group plotting
plots <- list()  # Create a list to store each ggplot object
for (i in 1:num_plots) {
# Calculate the range of states for the current plot
start_index <- (i - 1) * states_per_plot + 1
end_index <- min(i * states_per_plot, num_states)
states_to_plot <- state_list[start_index:end_index]
# Filter data for the current plot
data_to_plot <- covid_data %>% filter(state %in% states_to_plot)
# Draw the line chart
p <- ggplot(data_to_plot, aes(x = period, y = crude_COVID_rate_weekly, group = state, color = state)) +
geom_line() +
geom_point() +
labs(title = paste("Average COVID-19 Mortality Rate by State and Period", sep = ""),
x = "Period",
y = "Average Mortality Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +  # Hide legend
scale_color_brewer(palette = "Paired")
plots[[i]] <- p  # Store each ggplot object in the list
}
# Use patchwork to combine the plots
combined_plot <- wrap_plots(plots, ncol = 3) +  # Adjust ncol parameter as needed for layout
plot_layout(nrow = ceiling(num_plots / 3), ncol = 3) +  # Adjust layout as necessary
plot_spacer()  # Reduce space between plots
# Display the combined plot
print(combined_plot)
library(dplyr)      # For data manipulation
library(readr)      # For reading data
library(ggplot2)    # For plotting
library(patchwork)  # For combining multiple plots
state_list <- unique(average_mortality_by_state$state)  # Get a list of unique states
num_states <- length(state_list)                          # Calculate the number of states
# Plot 10 states per plot
states_per_plot <- 10
num_plots <- ceiling(num_states / states_per_plot)       # Calculate the total number of plots
plots <- list()  # Create a list to store each ggplot object
for (i in 1:num_plots) {
start_index <- (i - 1) * states_per_plot + 1  # Starting index for the current plot
end_index <- min(i * states_per_plot, num_states)  # Ending index for the current plot
states_to_plot <- state_list[start_index:end_index]  # States to be plotted
# Filter the data for the current plot
data_to_plot <- average_mortality_by_state %>% filter(state %in% states_to_plot)
# Loop to draw the line plot
p <- ggplot(data_to_plot, aes(x = period, y = average_mortality_rate, group = state, color = state)) +
geom_line() +  # Add line
geom_point() +  # Add data points
labs(title = paste("Average COVID-19 Mortality Rate by State and Period", sep = ""),
x = "Period", y = "Average Mortality Rate") +  # Add labels
theme_minimal() +  # Use a clean and simple theme
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +  # Set x-axis text angle and hide legend
scale_color_brewer(palette = "Paired")  # Set color palette
plots[[i]] <- p  # Store the ggplot object
}
combined_plot <- wrap_plots(plots, ncol = 3) +  # Set the number of plots per row
plot_layout(nrow = ceiling(num_plots / 3), ncol = 3) +  # Adjust rows and columns based on the number of plots
plot_spacer()  # Reduce space between plots
# Display the combined large plot
print(combined_plot)
# Get the list of states
state_list <- unique(covid_data$state)  # Assuming we use the state column from covid_data
num_states <- length(state_list)
# Plotting each 10 states in one chart
states_per_plot <- 10
num_plots <- ceiling(num_states / states_per_plot)
# Group plotting
plots <- list()  # Create a list to store each ggplot object
for (i in 1:num_plots) {
# Calculate the range of states for the current plot
start_index <- (i - 1) * states_per_plot + 1
end_index <- min(i * states_per_plot, num_states)
states_to_plot <- state_list[start_index:end_index]
# Filter data for the current plot
data_to_plot <- covid_data %>% filter(state %in% states_to_plot)
# Draw the line chart
p <- ggplot(data_to_plot, aes(x = period, y = crude_COVID_rate_weekly, group = state, color = state)) +
geom_line() +
geom_point() +
labs(title = paste("Average COVID-19 Mortality Rate by State and Period", sep = ""),
x = "Period",
y = "Average Mortality Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +  # Hide legend
scale_color_brewer(palette = "Paired")
plots[[i]] <- p  # Store each ggplot object in the list
}
# Use patchwork to combine the plots
combined_plot <- wrap_plots(plots, ncol = 3) +  # Adjust ncol parameter as needed for layout
plot_layout(nrow = ceiling(num_plots / 3), ncol = 3) +  # Adjust layout as necessary
plot_spacer()  # Reduce space between plots
# Display the combined plot
print(combined_plot)
# Get the list of states
state_list <- unique(covid_data$state)  # Assuming we use the state column from covid_data
num_states <- length(state_list)
# Plotting each 10 states in one chart
states_per_plot <- 10
num_plots <- ceiling(num_states / states_per_plot)
# Group plotting
plots <- list()  # Create a list to store each ggplot object
for (i in 1:num_plots) {
# Calculate the range of states for the current plot
start_index <- (i - 1) * states_per_plot + 1
end_index <- min(i * states_per_plot, num_states)
states_to_plot <- state_list[start_index:end_index]
# Filter data for the current plot
data_to_plot <- covid_data %>% filter(state %in% states_to_plot)
# Draw the line chart
p <- ggplot(data_to_plot, aes(x = period, y = crude_COVID_rate_weekly, group = state, color = state)) +
geom_line() +
geom_point() +
labs(title = paste("Average COVID-19 Mortality Rate by State and Period", sep = ""),
x = "Period",
y = "Average Mortality Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +  # Hide legend
scale_color_brewer(palette = "Paired")
plots[[i]] <- p  # Store each ggplot object in the list
}
# Use patchwork to combine the plots
combined_plot <- wrap_plots(plots, ncol = 3) +  # Adjust ncol parameter as needed for layout
plot_layout(nrow = ceiling(num_plots / 3), ncol = 3) +  # Adjust layout as necessary
plot_spacer()  # Reduce space between plots
# Display the combined plot
print(combined_plot)
# Get the list of states
state_list <- unique(covid_data$state)  # Assume using the state column in covid_data
num_states <- length(state_list)
# Plot every 10 states on one chart
states_per_plot <- 10
num_plots <- ceiling(num_states / states_per_plot)
# Group plotting
plots <- list()  # Create a list to store each ggplot object
for (i in 1:num_plots) {
# Calculate the range of states for the current plot
start_index <- (i - 1) * states_per_plot + 1
end_index <- min(i * states_per_plot, num_states)
states_to_plot <- state_list[start_index:end_index]
# Filter the data for the current plot
data_to_plot <- covid_data %>% filter(state %in% states_to_plot)
# Plot the line chart
p <- ggplot(data_to_plot, aes(x = period, y = crude_COVID_rate_weekly, group = state, color = state)) +
geom_line() +
geom_point() +
labs(title = paste("Average COVID-19 Mortality Rate by State and Period", sep = ""),
x = "Period",
y = "Average Mortality Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +  # Hide legend
scale_color_brewer(palette = "Paired")
plots[[i]] <- p  # Store each ggplot object in the list
}
# Combine charts using patchwork
combined_plot <- wrap_plots(plots, ncol = 3) +  # Adjust ncol parameter for layout
plot_layout(nrow = ceiling(num_plots / 3), ncol = 3) +  # Adjust layout as needed
plot_spacer()  # Reduce whitespace between charts
combined_plot
library(dplyr)
library(readr)
library(ggplot2)
library(patchwork)
# Read CSV file
covid_data <- read_csv("covid_data_filtered.csv")
# Convert week_ending_date to date format
covid_data$week_ending_date <- as.Date(covid_data$week_ending_date, format = "%Y/%m/%d")
# Get the list of states
state_list <- unique(covid_data$state)  # Assume using the state column in covid_data
num_states <- length(state_list)
# Plot every 10 states on one chart
states_per_plot <- 10
num_plots <- ceiling(num_states / states_per_plot)
# Group plotting
plots <- list()  # Create a list to store each ggplot object
for (i in 1:num_plots) {
# Calculate the range of states for the current plot
start_index <- (i - 1) * states_per_plot + 1
end_index <- min(i * states_per_plot, num_states)
states_to_plot <- state_list[start_index:end_index]
# Filter the data for the current plot
data_to_plot <- covid_data %>% filter(state %in% states_to_plot)
# Plot the line chart
p <- ggplot(data_to_plot, aes(x = period, y = crude_COVID_rate_weekly, group = state, color = state)) +
geom_line() +
geom_point() +
labs(title = paste("Average COVID-19 Mortality Rate by State and Period", sep = ""),
x = "Period",
y = "Average Mortality Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +  # Hide legend
scale_color_brewer(palette = "Paired")
plots[[i]] <- p  # Store each ggplot object in the list
}
# Combine charts using patchwork
combined_plot <- wrap_plots(plots, ncol = 3) +  # Adjust ncol parameter for layout
plot_layout(nrow = ceiling(num_plots / 3), ncol = 3) +  # Adjust layout as needed
plot_spacer()  # Reduce whitespace between charts
# Display the combined plot
print(combined_plot)
library(dplyr)
library(readr)
library(ggplot2)
library(patchwork)
library(dplyr)
library(readr)
library(ggplot2)
library(patchwork)
# Read the CSV file
covid_data <- read_csv("covid_data_filtered.csv")
# Convert week_ending_date to date format
covid_data$week_ending_date <- as.Date(covid_data$week_ending_date, format = "%Y/%m/%d")
# Dates represented by dashed lines
dashed_dates <- as.Date(c("2020-07-01", "2021-02-01", "2021-09-01", "2022-06-01", "2023-03-01", "2024-12-01"))
# Calculate the average number of deaths per state in each time period
average_deaths_by_state <- covid_data %>%
mutate(period = case_when(
week_ending_date < dashed_dates[1] ~ "Before 2020-07-01",
week_ending_date >= dashed_dates[1] & week_ending_date < dashed_dates[2] ~ "2020-07-01 to 2021-02-01",
week_ending_date >= dashed_dates[2] & week_ending_date < dashed_dates[3] ~ "2021-02-01 to 2021-09-01",
week_ending_date >= dashed_dates[3] & week_ending_date < dashed_dates[4] ~ "2021-09-01 to 2022-06-01",
week_ending_date >= dashed_dates[4] & week_ending_date < dashed_dates[5] ~ "2022-06-01 to 2023-03-01",
week_ending_date >= dashed_dates[5] & week_ending_date < dashed_dates[6] ~ "2023-03-01 to 2024-12-01",
TRUE ~ "After 2024-12-01"
)) %>%
group_by(state, period) %>%
summarise(average_deaths = mean(COVID_deaths_weekly, na.rm = TRUE), .groups = 'drop')
# Get the list of states
state_list <- unique(average_deaths_by_state$state)
num_states <- length(state_list)
# Plot 10 states per graph
states_per_plot <- 10
num_plots <- ceiling(num_states / states_per_plot)
# Plotting by groups
plots <- list()  # Create a list to store each ggplot object
for (i in 1:num_plots) {
# Calculate the range of states for the current graph
start_index <- (i - 1) * states_per_plot + 1
end_index <- min(i * states_per_plot, num_states)
states_to_plot <- state_list[start_index:end_index]
# Filter data for the current graph
data_to_plot <- average_deaths_by_state %>% filter(state %in% states_to_plot)
# Plot the line graph
p <- ggplot(data_to_plot, aes(x = period, y = average_deaths, group = state, color = state)) +
geom_line() +
geom_point() +
labs(title = "Average COVID-19 Deaths by State and Period",
x = "Period",
y = "Average Deaths") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +  # Hide legend
scale_color_brewer(palette = "Paired")
plots[[i]] <- p  # Store each ggplot object in the list
}
# Combine charts using patchwork
combined_plot <- wrap_plots(plots, ncol = 3) +
plot_layout(nrow = ceiling(num_plots / 3), ncol = 3) +
plot_spacer()  # Reduce whitespace between charts
# Display the combined large graph
print(combined_plot)
library(dplyr)
library(readr)
library(ggplot2)
library(patchwork)
# Get the list of states
state_list <- unique(average_mortality_by_state$state)
num_states <- length(state_list)
# Plot 10 states per graph
states_per_plot <- 10
num_plots <- ceiling(num_states / states_per_plot)
# Create a list to store each ggplot object
plots <- list()
for (i in 1:num_plots) {
# Calculate the range of states for the current plot
start_index <- (i - 1) * states_per_plot + 1
end_index <- min(i * states_per_plot, num_states)
states_to_plot <- state_list[start_index:end_index]
# Filter data for the current plot
data_to_plot <- average_mortality_by_state %>% filter(state %in% states_to_plot)
# Create a line plot
p <- ggplot(data_to_plot, aes(x = period, y = average_mortality_rate, group = state, color = state)) +
geom_line() +
geom_point() +
labs(title = "Average COVID-19 Mortality Rate by State and Period",
x = "Period",
y = "Average Mortality Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +  # Hide legend
scale_color_brewer(palette = "Paired")
plots[[i]] <- p
}
# Combine plots using patchwork
combined_plot <- wrap_plots(plots, ncol = 3) +
plot_layout(nrow = ceiling(num_plots / 3), ncol = 3) +
plot_spacer()  # Reduce whitespace between plots
# Display the combined large plot
print(combined_plot)
